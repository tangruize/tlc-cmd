; examples.ini
; Sample tlcwrapper.py configuration file

[options] ; TLC cmd arguments
; target specifies the top module TLA+ file
target: path/to/top_module.tla
; create a directory "path/to/model_name" + "_timestamp" + "_seq", copy all tla files to it and run tlc
model name: model_name
; default options below (optional)

; "workers" worker numbers, default is 1. (use "auto" to automatically select the number of threads)
workers: 1
; use SHOW_IN_TABLE to show in the summary table
workers: SHOW_IN_TABLE
; "dfs depth" sets model checking search mode to dfs (default is bfs), and sets the search depth
dfs depth: 100
; "simulation depth" enables simulation mode and sets the search depth
simulation depth: 100
; "simulation traces" generates n*worker traces (default is infinite), also enables simulation mode
simulation traces: 0
; "simulation dump traces" saves traces, also enables simulation mode
simulation dump traces: false/true
; "simulation seed" sets seed for random simulation (can be used to reproduce an experiment), also enables simulation mode
simulation seed: 0
; "check deadlock" whether or not to check deadlock, default is false
check deadlock: false/true
; "checkpoint minute" interval between check point, default is 30
checkpoint minute: 30
; "dump states" saves states to "MC_states.dump" or "MC_states.dot". value range: "true", "dot", or "false" (default)
dump states: false/true/dot
; "coverage minute" sets tlc computing coverage every n minutes, default is disabled
coverage minute: 1
; "system memory" physical memory to use (MB)
system memory: 4000
; "memory ratio" physical memory ratio to use (0..1) (overrides "system memory")
memory ratio: 0.4
; "community modules" whether or not to use community modules, default is false
community modules: false/true
; "other TLC options" other TLC options, each argument is split by line
other TLC options: field
                   split by
                   line

[init state] ; (optional) replace Init with a specific state in the trace file
; trace file or MC.out (with counterexample traces) to provide a state
trace file: path/to/trace_file
; the number of state to be selected, 0 to select the last state
state: 0
; python callback handlers to select a specific state
python init file: path/to/python_file

[behavior] ; what is the behavior spec
; one or none: (init & next) OR (temporal formula)
#init: Init
#next: Next
temporal formula: Spec

[invariants] ; (for safety) formulas true in every reachable state
; format: "NAME: formula"
TypeOK: TypeOK
TCConsistent: TCConsistent
; Warning: multi line removes any leading spaces
multi_line_inv: /\ multi
                /\ line
                /\ inv

[properties] ; (for liveness) temporal formulas true for every possible behavior
; format is the same as [invariants]
TCSpec: TCSpec

[state constraint] ; A state constraint is a formula restrict the possible states by a state predicate
; format is the same as [invariants]
StateConstraint: StateConstraint

[action constraint] ; An action constraint is a formula restrict the possible transactions
; format is the same as [invariants]
ActionConstraint: ActionConstraint

[additional definitions]; definitions required for the model checkings
Additional: abc == 1

[constants] ; specify the values of declared constants
; continuous same options will be combined by Cartesian product (to support batch mode)
Char: [model value]<symmetrical>{a, b}
Char: [model value]<symmetrical>{a, b, c}
Client: [model value]{c1, c2}
Client: [model value]{c1, c2, c3}
Server: [model value]
InitState: <<>>
InitState: SHOW_IN_TABLE
Msg: Msg

[override] ; direct TLC to use alternate definitions for operators
; the same as [constants] (but without "set of model values")
Nop: [model value]
Int: -10..10
Int: -1000..1000

[const expr] ; evaluate constant expression
; only one option "expr", you cannot define other names
expr: GCD(1,1)

[alias]
alias: Alias
