; examples.ini
; Sample tlcwrapper.py configuration file

[options]
; file `top-module.tla' should contain module `top-module'
target: path/to/top_module.tla
; create a directory `path/to/model_name' + '_timestamp', copy all tla files to it and run tlc
; any files starting with `MC' are generated by tlcwrapper.py
model name: model_name
; default options below (optional)
; `dfs depth' also sets model checking search mode to dfs, default is bfs
dfs depth: 100
; `simulation depth' also enables simulation mode, default is model checking mode
simulation depth: 100
; `simulation traces' generate n*worker traces, also enables simulation mode, default is infinite
simulation traces: 0
; `simulation dump traces' save traces, also enables simulation mode
simulation dump traces: false/true
; `simulation seed' adjusts seed for random simulation, also enables simulation mode
simulation seed: 0
; `workers' worker numbers, default is 1. (use 'auto' to automatically select the number of threads)
workers: 1
; use SHOW_IN_TABLE to show in summary table, although it has only one option
workers: SHOW_IN_TABLE
; `check deadlock' whether or not to check deadlock, default is false
check deadlock: false/true
; `checkpoint minute' interval between check point, default is 30
checkpoint minute: 30
; `dump states' saves states to `MC_states.dump` or `MC_states.dot`. value range: `true', `dot', or `false' (default)
dump states: false/true/dot
; `coverage minute` sets tlc computing coverage every n minutes, default is not to compute
coverage minute: 1
; `system memory' physical memory to use (MB)
system memory: 4000
; `memory ratio' physical memory ratio to use (0..1) (overrides `system memory')
memory ratio: 0.4
other TLC options: field
                   split by
                   line

[behavior] ; what is the behavior spec
; one or none: (init & next) OR (temporal formula)
#init: Init
#next: Next
temporal formula: Spec

[invariants] ; (for safety) formulas true in every reachable state
; format: `NAME: formula`
TypeOK: TypeOK
TCConsistent: TCConsistent
; Warning: multi line removes any leading spaces
multi_line_inv: /\ multi
                /\ line
                /\ inv

[properties] ; (for liveness) temporal formulas true for every possible behavior
; format is the same as [invariants]
TCSpec: TCSpec

[state constraint]; A state constraint is a formula restrict the possible states by a state predicate
; format is the same as [invariants]
StateConstraint: StateConstraint

[action constraint]; A state constraint is a formula restrict the possible transactions
; format is the same as [invariants]
ActionConstraint: ActionConstraint

[additional definitions]; definitions required for the model checkings
Additional: abc == 1

[constants] ; specify the values of declared constants
; continuous same options will be combined by Cartesian product
Char: [model value]<symmetrical>{a, b}
Char: [model value]<symmetrical>{a, b, c}
Client: [model value]{c1, c2}
Client: [model value]{c1, c2, c3}
Server: [model value]
InitState: <<>>
InitState: SHOW_IN_TABLE
Msg: Msg

[override] ; direct TLC to use alternate definitions for operators
; the same as [constants] (but no set of model values).
Nop: [model value]
Int: -10..10
Int: -1000..1000

[const expr] ; evaluate constant expression
; only one option 'expr', you cannot define other names
expr: GCD(1,1)
